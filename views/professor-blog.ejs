<!DOCTYPE html>
<html>
    <head>
    <link href="https://fonts.googleapis.com/css2?family=Pacifico&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="/styles/student-blogs/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
     <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
        <title>professor Blogs</title>
        <style>
            .toast {
  min-width: 300px;
  border-radius: 8px;
  box-shadow: 0 0.5rem 1rem rgba(0,0,0,.15);
}

.toast-header {
  border-radius: 8px 8px 0 0;
}

.bg-success {
  background-color: #28a745!important;
}
            .post-container {
              transition: all 0.3s ease;
            }
            
            .post-deleting {
              transform: scale(0.98);
              opacity: 0.5;
              pointer-events: none;
            }
            
            .post-removed {
              opacity: 0;
              transform: translateX(100%);
              height: 0;
              margin: 0;
              padding: 0;
            }
          
         .comment-deleting {
            opacity: 0.5;
            filter: grayscale(1);
            pointer-events: none;
          }
          
          .comment-removed {
            animation: commentRemove 0.3s forwards;
          }
          
          @keyframes commentRemove {
            0% { transform: translateX(0); opacity: 1 }
            100% { transform: translateX(100%); opacity: 0; height: 0; margin: 0 }
          }
        </style>
    </head>
    <body>
<div class="hig">

    <nav class="navbar navbar-expand-lg bg-dark navbar-dark py-1 fixed-top mb-5">
        <div class="container">
            <a class="navbar-brand" href="/after_login">
                <p class="masfofa">Masfofa<span>!</span></p>
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse"
            data-bs-target="#navmenu"><span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navmenu">
                <ul class="navbar-nav  ms-auto">
                    <li class="nav-item dropdown">
                        <a href="#" class="nav-link d-flex align-items-center profile-link" data-bs-toggle="dropdown" aria-expanded="false">
                            <img src="<%= userData.profileimage %>" alt="Profile" class="rounded-circle" width="40" height="40">
                            <p class="mb-0 ms-2 profile-name"><%= userData.fname %></p>
                        </a>
                        <div class="dropdown-menu">
                            <a href="/profile-page">Profile</a>
                        
                            <a href="/logout">Log out</a>
                        </div>
                    </li>  
                </ul>
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a href="/after_login" class="nav-link">Home</a>
                    </li>  
                </ul>
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a href="/professor-page" class="nav-link">Prof page</a>
                    </li>  
                </ul>
            </div>
        </div>
    </nav>

        <div class="containerr ">
            <div class="left-sidebar"></div>

            <div class="containert">
                <div class="main-content">
                    <div class="hh">
                        <div class="write-post-container">
                            <div class="user-profile">
                              <a href="/profile-page"><img src="<%= userData.profileimage %>" class="imgg"></a>
                                <div>
                                    <h5 style="color: #000;"><%= userData.fname %> <%= userData.lname %></h5>
                                </div>
                            </div>

                            <div class="post-input-container">
                                <div class="container ff">
                                    <div class="wave-group">
                                        <input required="" type="text" class="input" id="blog-title">
                                        <span class="bar"></span>
                                        <label class="label">
                                            <span class="label-char" style="--index: 0">T</span>
                                            <span class="label-char" style="--index: 1">h</span>
                                            <span class="label-char" style="--index: 2">e</span>
                                            <span class="label-char" style="--index: 3">&nbsp;</span>
                                            <span class="label-char" style="--index: 4">t</span>
                                            <span class="label-char" style="--index: 5">i</span>
                                            <span class="label-char" style="--index: 6">t</span>
                                            <span class="label-char" style="--index: 7">l</span>
                                            <span class="label-char" style="--index: 8">e</span>
                                        </label>
                                    </div>
                                </div>

                                <div class="container">
                                    <div class="wave-group">
                                        <textarea required class="input wave-textarea" rows="1" id="blog-content"></textarea>
                                        <span class="bar"></span>
                                        <label class="label">
                                            <span class="label-char" style="--index: 0">T</span>
                                            <span class="label-char" style="--index: 1">h</span>
                                            <span class="label-char" style="--index: 2">e</span>
                                            <span class="label-char" style="--index: 3">&nbsp;</span>
                                            <span class="label-char" style="--index: 4">b</span>
                                            <span class="label-char" style="--index: 5">o</span>
                                            <span class="label-char" style="--index: 6">d</span>
                                            <span class="label-char" style="--index: 7">y</span>
                                            <span class="label-char" style="--index: 8">&nbsp;</span>
                                            <span class="label-char" style="--index: 9">o</span>
                                            <span class="label-char" style="--index: 10">f</span>
                                            <span class="label-char" style="--index: 11">&nbsp;</span>
                                            <span class="label-char" style="--index: 12">t</span>
                                            <span class="label-char" style="--index: 13">h</span>
                                            <span class="label-char" style="--index: 14">e</span>
                                            <span class="label-char" style="--index: 15">&nbsp;</span>
                                            <span class="label-char" style="--index: 16">m</span>
                                            <span class="label-char" style="--index: 17">a</span>
                                            <span class="label-char" style="--index: 18">s</span>
                                            <span class="label-char" style="--index: 19">s</span>
                                            <span class="label-char" style="--index: 20">a</span>
                                            <span class="label-char" style="--index: 21">g</span>
                                            <span class="label-char" style="--index: 22">e</span>
                                        </label>
                                    </div>
                                </div>
                                <br>
                                <button class="boton-elegante kk" id="publish-btn">publish</button>
                                <div class="file-upload-wrapper">
                                    <button class="boton-elegante">Photo</button>
                                    <span class="file-name" id="file-name-display"></span>
                                    <input type="file" name="blog_image" id="file-upload" class="file-input" 
                                    accept="image/jpeg, image/png, image/gif, .jpg, .jpeg, .png, .gif">                                </div>
                            </div>
                        </div>
                        <br>
                        <hr>
                        <hr>
                        
                        <% if (userData.blogs && userData.blogs.length > 0) { %>
                            <% userData.blogs.forEach(blog => { %>
                                <div class="post-container" data-post-id="post-<%= blog.blog_id %>">
                                    <div class="post-row d-flex justify-content-between align-items-start">
                                        <div class="user-profile d-flex">
                                            <a href="<%= blog.user_profile || '#' %>"><img src="<%= blog.user_image %>" class="imgg"></a>
                                            <div>
                                                <h5><%= blog.user_fname %> <%= blog.user_lname %></h5>
                                                <p><%= blog.university_code %>, <%= blog.college_name %></p>
                                                <p class="text-muted post-date" data-date="<%= blog.timestamp_ %>"></p>
                                            </div>
                                        </div>
                                        <div class="dropdown">
                                            <a href="#" class="text-decoration-none" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="fa fa-ellipsis-v"></i>
                                            </a>
                                            <ul class="dropdown-menu dropdown-menu-end" id="dropdown-<%= blog.blog_id %>">
                                                <% if (userData.id === blog.user_id) { %>
                                                    <li><a class="dropdown-item" href="#" onclick="editPost('<%= blog.blog_id %>')">Edit</a></li>
                                                    <li><a class="dropdown-item" href="#" onclick="confirmDeletePost('<%= blog.blog_id %>')">Delete</a></li>
                                                    <% } else  { %>
                                                        <li><a class="dropdown-item" href="#" onclick="reportContent('blog', '<%= blog.blog_id %>')">Report</a></li>    
                                                <% } %>
                                            </ul>
                                        </div>
                                    </div>
                                
                                    <div class="post-title"><%= blog.blog_title %></div>
                                    <div class="transparent-box">
                                        <p class="post-text"><%= blog.blog_content %></p>
                                        <% if (blog.blog_image) { %>
                                            <div class="post-image-container">
                                                <img src="<%= blog.blog_image %>" alt="Blog image" class="post-image" onclick="showImageModal(this.src)">
                                            </div>
                                        <% } %>
                                    </div>
                                    
                                    <button class="com-button" type="button" 
                                         data-bs-toggle="offcanvas" 
                                                  data-bs-target="#canv2" 
                                                     aria-controls="offcanvasBottom"
                                                         onclick="setCurrentPostId('<%= blog.blog_id %>')">
                                                            Comments
                                                </button>
                                </div>
                                <hr>
                                <hr>
                            <% }); %>
                        <% } else { %>
                            <p>No blog posts found for <%= userData.uniCode %>, <%= userData.collegename %></p>
                        <% } %>
                    </div>
                </div>
            </div>

            <div class="right-sidebar">
                <img src="" class="mm" id="sidebar-preview" align="left">
            </div>
        </div>

        <div class="offcanvas offcanvas-bottom custom-offcanvas-center phon" tabindex="-1" id="canv2" style="height: 550px; width: 800px; margin-left:400px;">          
            <div class="offcanvas-header">
                <h5 class="offcanvas-title text-center w-100">Comments</h5>
                <button type="button" class="btn-close" data-bs-dismiss="offcanvas"></button>
            </div>
            <div class="offcanvas-body p-0 d-flex flex-column">
                <div class="comments-container flex-grow-1" style="overflow-y: auto;"></div>
                
                <div class="comment-input-container p-0 bg-dark">
                    <div class="input-group">
                        <input type="text" class="form-control search-bar" placeholder="Add a comment..." id="commentInput">
                        <button class="btn btn-primary btn-comment" onclick="postComment()" style="height: 41px;">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <!-- Add these elements right before the closing </body> tag -->
<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header bg-danger text-white">
          <h5 class="modal-title">Confirm Delete</h5>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <p>Are you sure you want to delete this post? This action cannot be undone.</p>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Success Notification -->
  <div id="deleteSuccessAlert" class="alert alert-success alert-dismissible fade show fixed-top m-3" role="alert" style="display: none; width: fit-content; margin-left: auto!important;">
    <i class="fas fa-check-circle me-2"></i>
    Post deleted successfully!
  </div>

<!-- Comment Delete Modal -->
<div class="modal fade" id="commentDeleteModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header bg-danger text-white">
          <h5 class="modal-title">Delete Comment</h5>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <p>Are you sure you want to delete this comment? This action cannot be undone.</p>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-danger" id="confirmCommentDelete">Delete</button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Comment Delete Success Toast -->
  <div id="commentDeleteToast" class="toast align-items-center text-bg-success border-0 position-fixed top-0 end-0 m-3" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="d-flex">
      <div class="toast-body">
        <i class="fas fa-check-circle me-2"></i> Comment deleted successfully!
      </div>
      <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
    </div>
  </div>
  <!-- Image Modal -->
<div class="modal fade" id="imageModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered modal-lg">
      <div class="modal-body text-center">
        <img id="expandedImage" src="" class="img-fluid">
      </div>
    </div>
  </div>
  <div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="reportToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-header bg-success text-white">
        <i class="fas fa-check-circle me-2"></i>
        <strong class="me-auto">Success</strong>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
      </div>
      <div class="toast-body bg-light">
        <span id="toastMessage"></span>
      </div>
    </div>
  </div>
    <!-- Edit Post Modal (corrected) -->
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-centered">
    <div class="modal-content text-center"> 
      <form id="editPostForm">
        <div class="modal-header border-0 justify-content-center">
          <h5 class="modal-title" id="editModalLabel">Edit Post</h5>
          <button type="button" class="btn-close position-absolute end-0 me-3" data-bs-dismiss="modal"></button>
        </div>
        
        <div class="modal-body d-flex flex-column align-items-center">
          <input type="hidden" id="editBlogId">
          <input type="text" id="editTitle" class="mb-2 form-control" required>
          <textarea class="form-control" id="editContent" rows="4" required></textarea>
          <img id="previewImage" src="" class="img-fluid mb-3 mt-3" style="max-height: 300px; display: none;">
          
          <div class="mb-3 d-flex gap-2">
            <label for="editImageInput" class="btn btn-outline-primary btn-sm">
              Change Image
            </label>
            <input type="file" id="editImageInput" accept="image/*" class="d-none">
            <button type="button" id="removeImageBtn" class="btn btn-outline-danger btn-sm">
              Remove Image
            </button>
          </div>
        </div>

        <div class="modal-footer justify-content-center">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary">Save Changes</button>
        </div>
      </form>
    </div>
  </div>
  </div>
</div>
        <section style="height: 100px;" class="bg-dark d-flex justify-content-center align-items-center flex-column">
            <h4 style="color: white; margin-bottom: 10px;">Made by</h4>
            <a href="/after_login" style=" text-decoration: none; color: #523DB9;">Masfofa Team</a>
        </section>
        
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
        
        <script>
            // Toast initialization
const reportToast = new bootstrap.Toast(document.getElementById('reportToast'));

async function reportContent(type, id) {
  try {
    // Prevent default anchor behavior
    event.preventDefault();
    
    const endpoint = type === 'blog' ? `/report-blog/${id}` : `/report-comment/${id}`;
    
    const response = await fetch(endpoint, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
      }
    });

    const result = await response.json();
    
    if (result.success) {
      document.getElementById('toastMessage').textContent = result.message;
      reportToast.show();
    } else {
      alert('Reporting failed: ' + (result.message || 'Unknown error'));
    }
  } catch (error) {
    console.error('Reporting error:', error);
    alert('Error submitting report');
  }
}
            let commentToDelete = null;

function confirmCommentDelete(commentId) {
  commentToDelete = commentId;
  const modal = new bootstrap.Modal(document.getElementById('commentDeleteModal'));
  modal.show();
}

async function performCommentDelete() {
  if (!commentToDelete) return;

  const commentElement = document.getElementById(`comment-${commentToDelete}`);
  if (!commentElement) return;

  commentElement.classList.add('comment-deleting');

  try {
    const response = await fetch(`/comments/${commentToDelete}`, {
      method: 'DELETE'
    });

    const result = await response.json();

    if (response.ok && result.success) {
      // Instead of just removing the element, reload the comments
      await loadComments(currentPostId);
      
      // Show success toast
      const toastEl = document.getElementById('commentDeleteToast');
      const toast = bootstrap.Toast.getOrCreateInstance(toastEl);
      toast.show();
    } else {
      commentElement.classList.remove('comment-deleting');
      alert('Error: ' + (result.message || 'Failed to delete comment'));
    }
  } catch (error) {
    commentElement.classList.remove('comment-deleting');
    console.error('Error deleting comment:', error);
    alert('Error deleting comment: ' + error.message);
  }

  commentToDelete = null;
  bootstrap.Modal.getInstance(document.getElementById('commentDeleteModal')).hide();
}

// Make sure this event listener exists
document.getElementById('confirmCommentDelete').addEventListener('click', performCommentDelete);
            // Current user ID from server-side
            const currentUserId = '<%= userData.id %>';
            
            document.getElementById('file-upload').addEventListener('change', function(e) {
                const fileName = e.target.files[0] ? e.target.files[0].name : 'No file chosen';
                document.getElementById('file-name-display').textContent = fileName;
            });

            document.getElementById('publish-btn').addEventListener('click', async function() {
                const title = document.getElementById('blog-title').value.trim();
                const content = document.getElementById('blog-content').value.trim();
                const fileInput = document.getElementById('file-upload');
                const file = fileInput.files[0];
                
                if (!title) {
                    alert('Please enter a title');
                    return;
                }
                
                if (!content) {
                    alert('Please enter blog content');
                    return;
                }
                
                try {
                    const formData = new FormData();
                    formData.append('blog_title', title);
                    formData.append('blog_content', content);
                    formData.append('uni_code', '<%= userData.uniCode %>');
                    formData.append('col_name', '<%= userData.collegename %>');
                    if (file) {
                        formData.append('blog_image', file);
                    }
                    
                    const response = await fetch('/save-blog', {
                        method: 'POST',
                        body: formData
                    });

                    const contentType = response.headers.get('content-type');
                    if (!contentType || !contentType.includes('application/json')) {
                        const text = await response.text();
                        throw new Error(text || 'Server error');
                    }
                    
                    const result = await response.json();
                    
                    if (!response.ok) {
                        throw new Error(result.message || 'Failed to save blog');
                    }
                    
                    if (result.success) {
                        window.location.reload();
                    } else {
                        alert('Error: ' + (result.message || 'Failed to save blog'));
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Error saving blog: ' + error.message);
                }
            });

            function timeAgo(date) {
                const now = new Date();
                const past = new Date(date);
                const seconds = Math.floor((now - past) / 1000);
        
                const intervals = [
                    { label: 'year', seconds: 31536000 },
                    { label: 'month', seconds: 2592000 },
                    { label: 'day', seconds: 86400 },
                    { label: 'h', seconds: 3600 },
                    { label: 'm', seconds: 60 },
                    { label: 's', seconds: 1 }
                ];
        
                for (const interval of intervals) {
                    const count = Math.floor(seconds / interval.seconds);
                    if (count > 0) {
                        return `posted ${count}${interval.label}${count > 1 && interval.label.length > 1 ? 's' : ''} ago`;
                    }
                }
                return 'just now';
            }

            // Update all post dates on page load
            document.addEventListener('DOMContentLoaded', function() {
                document.querySelectorAll('.post-date').forEach(el => {
                    const dateStr = el.getAttribute('data-date');
                    if (dateStr) {
                        el.textContent = timeAgo(dateStr);
                    }
                });
            });

            document.getElementById('file-upload').addEventListener('change', function(e) {
                const file = e.target.files[0];
                const fileNameDisplay = document.getElementById('file-name-display');
                fileNameDisplay.textContent = file ? file.name : 'No file chosen';

                // Show image in the sidebar
                if (file && file.type.startsWith('image/')) {
                    const reader = new FileReader();
                    reader.onload = function(event) {
                        const sidebarImage = document.getElementById('sidebar-preview');
                        sidebarImage.src = event.target.result;
                        sidebarImage.style.display = 'block';
                    };
                    reader.readAsDataURL(file);
                }
            });

            // Post management functions
            function editPost(postId) {
                // Redirect to edit page or open edit modal
                window.location.href = `/edit-blog?id=${postId}`;
            }

            function confirmDeletePost(postId) {
                if (confirm('Are you sure you want to delete this post?')) {
                    deletePost(postId);
                }
            }

            async function deletePost(postId) {
                try {
                    const response = await fetch(`/blogs/${postId}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    
                    const result = await response.json();
                    
                    if (!response.ok) {
                        throw new Error(result.message || 'Failed to delete post');
                    }
                    
                    if (result.success) {
                        // Remove the post from the DOM
                        document.querySelector(`.post-container[data-post-id="post-${postId}"]`).remove();
                    } else {
                        alert('Error: ' + (result.message || 'Failed to delete post'));
                    }
                } catch (error) {
                    console.error('Error deleting post:', error);
                    alert('Error deleting post: ' + error.message);
                }
            }

            // Comments system functions
            let currentPostId = null;
            let replyingTo = null;

            function setCurrentPostId(postId) {
                currentPostId = postId;
                replyingTo = null;
                loadComments(postId);
            }

            function updateCommentInput(userName) {
                const input = document.getElementById('commentInput');
                if (replyingTo !== null && userName) {
                    input.value = `@${userName} `;
                    input.selectionStart = input.selectionEnd = input.value.length;
                } else {
                    input.value = '';
                }
            }

            async function loadComments(blogId) {
                const container = document.querySelector('.comments-container');
                container.innerHTML = '<div class="text-center py-3">Loading comments...</div>';
                
                try {
                    const response = await fetch(`/comments/${blogId}`);
                    const result = await response.json();
                    
                    if (!response.ok) {
                        throw new Error(result.message || 'Failed to load comments');
                    }
                    
                    container.innerHTML = '';
                    
                    if (result.comments && result.comments.length > 0) {
                        const buildCommentTree = (comments, parentId = null) => {
                            return comments
                                .filter(comment => comment.parent_comment_id === parentId)
                                .map(comment => {
                                    const replies = buildCommentTree(comments, comment.comment_id);
                                    return {
                                        ...comment,
                                        replies
                                    };
                                });
                        };
                        
                        const commentTree = buildCommentTree(result.comments);

                        const displayComment = (comment, level = 0) => {
                            const margin = level * 20;
                            const isOwner = currentUserId == comment.user_id;
                            
                            const formattedText = comment.comment_text.replace(/@(\w+)/g, (match, fname) =>
                                `<a href="/user-profile?user_id=${comment.user_id}" class="text-primary">@${fname}</a>`
                            );

                            const dropdownOptions = isOwner ? 
                                `<li><a class="dropdown-item" href="#" onclick="editComment('${comment.comment_id}', '${encodeURIComponent(comment.comment_text)}')">Edit</a></li>
                                 <li><a class="dropdown-item" href="#" onclick="confirmCommentDelete('${comment.comment_id}')">Delete</a></li>` : 
    `<li><a class="dropdown-item" href="#" onclick="reportContent('comment', '${comment.comment_id}')">Report</a></li>`
                            const html = `
                            <div class="comment" id="comment-${comment.comment_id}" style="margin-left: ${margin}px">
                                <div class="user-profile d-flex align-items-center p-2">
                                    <a href="${comment.user_profile}" class="profile-link">
                                        <img src="${comment.user_image}" class="rounded-circle me-2" width="32">
                                    </a>
                                    <div style="width: 100%;">
                                        <div class="post-row">
                                            <a href="/user-profile?user_id=${comment.user_id}" class="text-decoration-none" style="color: #000">
                                                <h6 class="mb-0">${comment.user_fname} ${comment.user_lname}</h6>
                                            </a>
                                            <div class="dropdown" align="right">
                                                <a href="#" class="text-decoration-none" data-bs-toggle="dropdown" aria-expanded="false">
                                                    <i class="fa fa-ellipsis-v"></i>
                                                </a>
                                                <ul class="dropdown-menu dropdown-menu-end">
                                                    ${dropdownOptions}
                                                </ul>
                                            </div>
                                        </div>
                                         <small class="text-muted">${timeAgo(comment.timestamp_)} ${comment.is_edited ? '(edited)' : ''}</small>
                                    </div>
                                </div>
                                <div class="post-row p-2">
                                    <p class="mt-2 mb-0" style="padding: 0 0 0 55px" id="comment-text-${comment.comment_id}">${formattedText}</p>
                                    <div class="comment-edit-form d-none" id="edit-form-${comment.comment_id}">
                                        <textarea class="form-control mb-2" id="edit-text-${comment.comment_id}">${comment.comment_text}</textarea>
                                        <button class="btn btn-sm btn-primary me-2" onclick="saveCommentEdit('${comment.comment_id}')">Save</button>
                                        <button class="btn btn-sm btn-secondary" onclick="cancelCommentEdit('${comment.comment_id}')">Cancel</button>
                                    </div>
                                    <button style="background-color: #fff; border: none; font-size: 14px;" 
                                            class="fontt" 
                                            onclick="setReplyingTo('${comment.comment_id}', '${comment.user_fname}')">Reply</button>
                                </div>
                            </div>
                            `;
                            container.insertAdjacentHTML('beforeend', html);
                            
                            if (comment.replies && comment.replies.length > 0) {
                                comment.replies.forEach(reply => displayComment(reply, level + 1));
                            }
                        };

                        commentTree.forEach(comment => displayComment(comment));
                    } else {
                        container.innerHTML = '<div class="text-center py-3">No comments yet</div>';
                    }
                } catch (error) {
                    console.error('Error loading comments:', error);
                    container.innerHTML = `<div class="text-center py-3 text-danger">Error loading comments: ${error.message}</div>`;
                }
            }

            async function postComment() {
                const commentInput = document.getElementById('commentInput');
                let commentText = commentInput.value.trim();
                
                if (!commentText || !currentPostId) return;
                
                try {
                    const response = await fetch('/comments', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            blog_id: currentPostId,
                            parent_comment_id: replyingTo || null,
                            comment_text: commentText
                        })
                    });
                    
                    const result = await response.json();
                    
                    if (!response.ok) {
                        throw new Error(result.message || 'Failed to post comment');
                    }
                    
                    await loadComments(currentPostId);
                    commentInput.value = '';
                    replyingTo = null;
                    
                    const container = document.querySelector('.comments-container');
                    container.scrollTo({
                        top: container.scrollHeight,
                        behavior: 'smooth'
                    });
                } catch (error) {
                    console.error('Error posting comment:', error);
                    alert('Error posting comment: ' + error.message);
                }
            }

            function editComment(commentId, commentText) {
                const commentElement = document.getElementById(`comment-text-${commentId}`);
                const editForm = document.getElementById(`edit-form-${commentId}`);
                const editTextarea = document.getElementById(`edit-text-${commentId}`);
                
                if (commentElement && editForm) {
                    commentElement.classList.add('d-none');
                    editForm.classList.remove('d-none');
                    editTextarea.value = decodeURIComponent(commentText);
                    editTextarea.focus();
                }
            }

            async function saveCommentEdit(commentId) {
                const editTextarea = document.getElementById(`edit-text-${commentId}`);
                const commentText = editTextarea.value.trim();
                
                if (!commentText) return;
                
                try {
                    const response = await fetch(`/comments/${commentId}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ comment_text: commentText })
                    });
                    
                    const result = await response.json();
                    
                    if (!response.ok) {
                        throw new Error(result.message || 'Failed to update comment');
                    }
                    
                    await loadComments(currentPostId);
                } catch (error) {
                    console.error('Error updating comment:', error);
                    alert('Error updating comment: ' + error.message);
                }
            }

            function cancelCommentEdit(commentId) {
                const commentElement = document.getElementById(`comment-text-${commentId}`);
                const editForm = document.getElementById(`edit-form-${commentId}`);
                
                if (commentElement && editForm) {
                    commentElement.classList.remove('d-none');
                    editForm.classList.add('d-none');
                }
            }

            function setReplyingTo(commentId, userName) {
                replyingTo = commentId;
                updateCommentInput(userName);
                document.getElementById('commentInput').focus();
            }

            // Initialize comment offcanvas
            var commentOffcanvas = new bootstrap.Offcanvas(document.getElementById('canv2'));
            document.getElementById('canv2').addEventListener('shown.bs.offcanvas', function () {
                if (currentPostId) {
                    loadComments(currentPostId);
                }
            });
        </script>
        <script>
            let postToDelete = null;
          
            // Enhanced confirm delete function
            function confirmDeletePost(postId) {
              postToDelete = postId;
              const modal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
              modal.show();
            }
          
            // Delete post with animation
            async function performDelete() {
              if (!postToDelete) return;
          
              const postElement = document.querySelector(`.post-container[data-post-id="post-${postToDelete}"]`);
              if (!postElement) return;
          
              // Add deleting state
              postElement.classList.add('post-deleting');
          
              try {
                const response = await fetch(`/blogs/${postToDelete}`, {
                  method: 'DELETE',
                  headers: { 'Content-Type': 'application/json' }
                });
          
                const result = await response.json();
          
                if (response.ok && result.success) {
                  // Animate removal
                  postElement.classList.add('post-removed');
                  
                  // Show success alert
                  const successAlert = document.getElementById('deleteSuccessAlert');
                  successAlert.style.display = 'block';
                  setTimeout(() => {
                    successAlert.style.display = 'none';
                  }, 3000);
          
                  // Remove element after animation
                  setTimeout(() => {
                    postElement.remove();
                  }, 300);
                } else {
                  postElement.classList.remove('post-deleting');
                  alert('Error: ' + (result.message || 'Failed to delete post'));
                }
              } catch (error) {
                postElement.classList.remove('post-deleting');
                console.error('Error deleting post:', error);
                alert('Error deleting post: ' + error.message);
              }
          
              // Cleanup
              postToDelete = null;
              const modal = bootstrap.Modal.getInstance(document.getElementById('deleteConfirmModal'));
              modal.hide();
            }
          
            // Attach confirm handler
            document.getElementById('confirmDeleteBtn').addEventListener('click', performDelete);


            function showImageModal(src) {
  const modalImg = document.getElementById('expandedImage');
  modalImg.src = src;
  new bootstrap.Modal(document.getElementById('imageModal')).show();
}
          </script>
          <script>
// Add this to your existing script section

let currentEditBlogId = null;
let originalImage = null;

async function editPost(postId) {
  try {
    const response = await fetch(`/blogs/${postId}`, {
      headers: { 'Accept': 'application/json' }
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const blog = await response.json();

    // Populate form
    document.getElementById('editBlogId').value = postId;
    document.getElementById('editTitle').value = blog.blog_title;
    document.getElementById('editContent').value = blog.blog_content;

    // Handle image
    const previewImage = document.getElementById('previewImage');
    if (blog.blog_image) {
      previewImage.src = blog.blog_image;
      previewImage.style.display = 'block';
      originalImage = blog.blog_image;
    } else {
      previewImage.style.display = 'none';
      originalImage = null;
    }

    // Show modal
    new bootstrap.Modal(document.getElementById('editModal')).show();
  } catch (error) {
    console.error('Error loading post:', error);
    alert('Error loading post: ' + error.message);
  }
}

// Form submission handler
document.getElementById('editPostForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  
  const formData = new FormData();
  formData.append('blog_title', document.getElementById('editTitle').value);
  formData.append('blog_content', document.getElementById('editContent').value);
  
  // Handle image file
  const imageInput = document.getElementById('editImageInput');
  if (imageInput.files[0]) {
    formData.append('blog_image', imageInput.files[0]);
  }
  
  // Handle image removal
  if (!document.getElementById('previewImage').src && originalImage) {
    formData.append('remove_image', 'true');
  }

  try {
    const response = await fetch(`/blogs/${document.getElementById('editBlogId').value}`, {
      method: 'PUT',
      body: formData
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.error || 'Failed to update post');
    }

    window.location.reload();
  } catch (error) {
    console.error('Update error:', error);
    alert('Error updating post: ' + error.message);
  }
});

// Image preview handling
document.getElementById('editImageInput').addEventListener('change', function() {
  const previewImage = document.getElementById('previewImage');
  if (this.files && this.files[0]) {
    const reader = new FileReader();
    reader.onload = (e) => {
      previewImage.src = e.target.result;
      previewImage.style.display = 'block';
    };
    reader.readAsDataURL(this.files[0]);
  }
});

// Remove image handler
document.getElementById('removeImageBtn').addEventListener('click', function() {
  const previewImage = document.getElementById('previewImage');
  previewImage.src = '';
  previewImage.style.display = 'none';
  document.getElementById('editImageInput').value = '';
  originalImage = null;
});
          </script>
    </body>
</html>